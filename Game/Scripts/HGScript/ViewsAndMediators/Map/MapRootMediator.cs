using UnityEngine;
using System.Collections.Generic;
using strange.extensions.mediation.impl;
using MapNavKit;

public class MapRootMediator : Mediator {

    [Inject]
    public MapRootView mapRootView { get; set; }

    [Inject]
    public GameInfo gameInfo { get; set; }

    [Inject]
    public MapNodeSelectSignal mapNodeSelectSignal { get; set; }

    [Inject]
    public UpdateDirectionPathSignal updateDirectionPathSignal { get; set; }

    //[Inject]
    //public RoleSelectSignal roleSelectSignal { get; set; }

    [Inject]
    public GameDataService gameDataService { get; set; }

    //[Inject]
    //public TestSignal testSignal { get; set; }

    [Inject]
    public DirectionClickCallbackSignal directionClickCallbackSignal { get; set; }

    [Inject]
    public ResourceService resourceService { get; set; }


    //[Inject]
    //public PathSetFinishedSignal pathSetFinishedSignal { get; set; }

    List<int> selectedNodeList = new List<int>();

    //List<MapNavNode> pathList=new List<MapNavNode>();

    MapNavNode selectedRoleNode = null;
    RoleInfo selectedRoleInfo = null;

    //int currentDirectionId;

    public override void OnRegister()
    {
        mapRootView.Init(gameInfo);
        //mapRootView.CreateGrid<MapNavNode>();



        MainContext mainContext = contextView.GetComponent<BootstrapView>().context as MainContext;
        mainContext.mapRootMediator = this;

        mapNodeSelectSignal.AddListener(OnMapNodeSelectSignal);

        //updateDirectionPathSignal.AddListener(OnUpdateDirectionPathSignal);

        //pathSetFinishedSignal.AddListener(OnPathSetFinishedSignal);

        directionClickCallbackSignal.AddListener(OnDirectionClickCallbackSignal);

        //cancelPathSelectSignal.AddListener(OnCancelPathSelectSignal);

        mapRootView.OnMouseEnter += OnMouseEnter;

        mapRootView.pathSetFinishCallback += OnPathSetFinished;

        //testSignal.Dispatch();
        InstanciateGameInfo();
        
    }

    void InstanciateGameInfo()
    {
        foreach (int roleid in gameInfo.role_dic.Keys)
        {
            GameObject roleobj = resourceService.Spawn("role/" + gameInfo.role_dic[roleid].roledid);
            roleobj.name = "role_" + roleid;
            Debug.Log("123");
        }
    }

    void OnMapNodeSelectSignal(MapNavNode mapNavNode)
    {
        mapRootView.SetDraggingCameraMode (true);
        if (mapNavNode == null)
        {
            Debug.LogError("mapNavNode is null!!");
        }
        selectedRoleInfo = gameDataService.GetRoleInMap(mapNavNode.idx);
        if (selectedRoleInfo != null)
        {
            selectedRoleNode = mapNavNode;

            //roleSelectSignal.Dispatch(selectedRoleInfo);
        }

    }


    void OnDirectionClickCallbackSignal(DirectionClickSignal.Param param)
    {
        //Debug.Log("direction:"+directionid+" has been clicked!");
        mapRootView.SetDraggingCameraMode(false);
        //gameInfo.curr_direction_dic[param.roleid].path.Clear();
        selectedNodeList.Clear();
        updateDirectionPathSignal.Dispatch(new UpdateDirectionPathSignal.Param(selectedRoleInfo.roleid,selectedNodeList));
        //currentDirectionId = directionid;

    }


    void OnMouseEnter(MapNavNode lastNode,MapNavNode thisNode)
    {
        if (lastNode == null)
        {
            //selectedNodeList.Clear();
            if (mapRootView.NodeIndicesAround(selectedRoleNode.idx, true, false, null).Contains(thisNode.idx))
            {
                //selectedNodeList.Add(selectedRoleNode.idx);
                selectedNodeList.Add(thisNode.idx);
            }
            //else if (thisNode.idx == selectedRoleNode.idx)
            //{
            //    selectedNodeList.Add(thisNode.idx);
            //}
        }
        else
        {
            if (mapRootView.NodeIndicesAround(lastNode.idx, true, false, null).Contains(thisNode.idx))
            {
                selectedNodeList.Add(thisNode.idx);
            }
        }

        //if (selectedNodeList.Count == 0)
        //{
        //    //由于这个path方法返回的元素不包括起点，却包括终点，而我想要的列表是包括起点，不包括终点，因此将起点和终点对调，最后把返回的list倒过来添加到路径列表中
        //    List<MapNavNode> autoGeneratedInversPath = mapRootView.Path<MapNavNode>(mapNavNode, selectedRoleNode, NodeCostCallback);
        //    for (int i = autoGeneratedInversPath.Count - 1; i > 0; i--)
        //    {
        //        selectedNodeList.Add(autoGeneratedInversPath[i].idx);
        //    }
        //}
        //selectedNodeList.Add(mapNavNode.idx);

        //if (selectedNodeList.Count == 0)
        //{
        //    List<MapNavNode> autoGeneratedPath = mapRootView.Path<MapNavNode>(selectedRoleNode, mapNavNode, NodeCostCallback);
        //    if (autoGeneratedPath.Count > 0)
        //    {
        //        for (int i = 0; i < autoGeneratedPath.Count - 1; i++)
        //        {
        //            selectedNodeList.Add(autoGeneratedPath[i].idx);
        //        }
        //    }
        //}
        //if (selectedRoleNode != mapNavNode)
        //{
        //    selectedNodeList.Add(mapNavNode.idx);
        //}
        updateDirectionPathSignal.Dispatch(new UpdateDirectionPathSignal.Param(selectedRoleInfo.roleid,selectedNodeList));

    }

    //void OnUpdateDirectionPathSignal(RoleInfo roleInfo, int directionId, List<MapNavNode> selectdNodeList)
    //{
    //    //foreach (MapNavNode mapNavNode in selectedNodeList)
    //    //{
    //    //    mapRootView.SetColor(currentDirectionId, autoGeneratedInversPath[i].idx);
    //    //}
    //}

    void OnPathSetFinished()
    {

        //pathSetFinishedSignal.Dispatch(selectedRoleInfo, currentDirectionId, selectedNodeList);
        mapNodeSelectSignal.Dispatch(selectedRoleNode);
        
    }

    void OnPathSetFinishedSignal(RoleInfo roleInfo,int directionId, List<MapNavNode> selectdNodeList)
    {
        mapRootView.SetDraggingCameraMode(true);
        selectedRoleNode = null;
        selectedRoleInfo = null;

        //Debug.Log(selectedNodeList.Count);
    }

    float NodeCostCallback(MapNavNode fromNode, MapNavNode toNode)
    {
        return 1f;
    }

    //void OnCancelPathSelectSignal()
    //{
    //    mapRootView.SetDraggingCameraMode(true);
    //    //Debug.Log("cancel");
    //}

    //public override void OnRemove()
    //{
    //    mapNodeSelectSignal.RemoveListener(OnMapNodeSelectSignal);
    //    //pathSetFinishedSignal.RemoveListener(OnPathSetFinishedSignal);
    //    directionClickCallbackSignal.RemoveListener(OnDirectionClickCallbackSignal);
    //}

    public void OnDestroy()
    {
        mapNodeSelectSignal.RemoveListener(OnMapNodeSelectSignal);
        //pathSetFinishedSignal.RemoveListener(OnPathSetFinishedSignal);
        directionClickCallbackSignal.RemoveListener(OnDirectionClickCallbackSignal);
    }
}
